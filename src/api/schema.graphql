type Query {
    characters(page: Int, filter: CharacterFilter): CharactersResponse
    character(id: ID!): Character
    episodes(page: Int, filter: EpisodeFilter): EpisodesResponse
    episode(id: ID!): Episode
    locations(page: Int, filter: LocationFilter): LocationsResponse
    location(id: ID!): Location
}

type CharactersResponse {
    info: Info
    results: [Character]
}

type EpisodesResponse {
    info: Info
    results: [Episode]
}

type LocationsResponse {
    info: Info
    results: [Location]
}

type Info {
    count: Int
    pages: Int
    next: Int
    prev: Int
}

type Character {
    id: ID!
    name: String!
    age: Int
    email: String
    status: String
    species: String
    type: String
    gender: String
    origin: Location
    location: Location
    image: String
    episode: [Episode]
}

type Episode {
    id: ID!
    name: String!
    air_date: String
    episode: String
    characters: [Character]
}

type Location {
    id: ID!
    name: String!
    type: String
    dimension: String
    residents: [Character]
}

input CharacterFilter {
    name: String
    status: String
    species: String
    type: String
    gender: String
}

input EpisodeFilter {
    name: String
    episode: String
}

input LocationFilter {
    name: String
    type: String
    dimension: String
}

type Stats {
    totalCharacters: Int
    totalEpisodes: Int
    totalLocations: Int
}

type SearchResult {
    characters: [Character]
    episodes: [Episode]
    locations: [Location]
}

#Mutation:
type Mutation {
    createCharacter(input: CharacterInput!): Character
    updateCharacter(id: ID!, input: CharacterInput!): Character
    deleteCharacter(id: ID!): Boolean
}

input CharacterInput {
    name: String!
    species: String!
    status: String!
    gender: String!
}

type Character {
    id: ID!
    name: String!
    species: String!
    status: String!
    gender: String!
}
